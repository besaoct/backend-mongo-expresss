# ----------------------------------------
# Port Configuration
# ----------------------------------------

# The port number your server will run on
PORT=8000


# ----------------------------------------
# MongoDB Connection String Configuration
# ----------------------------------------

# Example 1: Local MongoDB without authentication
# Replace 'localhost' and '55000' with your MongoDB host and port
MONGO_CONNECTION_STRING=mongodb://localhost:55000/backend

# Example 2: Local MongoDB with authentication (username/password)
# Replace 'username' and 'password' with your MongoDB credentials
# Replace 'localhost', '55000', and 'backend' with the respective host, port, and database name
MONGO_CONNECTION_STRING=mongodb://username:password@localhost:55000/backend

# Example 3: MongoDB Atlas (Cloud-hosted MongoDB)
# Replace '<username>' and '<password>' with your database username and password
# Replace '<cluster-url>' with your Atlas cluster URL (e.g., cluster0.mongodb.net)
# Replace '<database>' with the name of your database
MONGO_CONNECTION_STRING=mongodb+srv://<username>:<password>@<cluster-url>/<database>?retryWrites=true&w=majority

# Notes:
# 1. For sensitive credentials (e.g., username, password), URL-encode special characters like '@', '%', or ':'.
#    Use a tool like https://www.urlencoder.io/ to encode your credentials properly.
# 2. If you use MongoDB Atlas, ensure your IP address is whitelisted in the Atlas security settings.
# 3. The `retryWrites=true&w=majority` options are recommended for MongoDB Atlas for better reliability.
# 4. If your MongoDB connection requires SSL/TLS, use `mongodb+srv` for DNS seedlist connection format, 
#    or include `?tls=true` in the connection string.



# ----------------------------------------
# Environment Configuration
# ----------------------------------------

# Node environment - can be 'development', 'production', or 'test'
NODE_ENV=development


# ----------------------------------------
# Security Configuration
# ----------------------------------------

# JWT secret key for signing and verifying JSON Web Tokens
# Generate a secure random key using the following command:
# node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
JWT_SECRET=your_random_secure_secret_here


# ----------------------------------------
# Frontend Application Configuration
# ----------------------------------------

# The name of your application
APP_NAME='Your App Name'

# The primary domain of your frontend application
APP_DOMAIN=http://localhost:8000

# Other frontend domains or applications that should be allowed (whitelisted)
# Separate multiple domains with '&'
OTHER_APP_DOMAINS=http://localhost:3000&http://localhost:55000


# ----------------------------------------
# Email Configuration
# ----------------------------------------

# Email address used for sending emails (e.g., no-reply)
EMAIL_USER=your_email_here@gmail.com

# Email account password or app-specific password (if using Gmail, generate an app password)
EMAIL_PASS=your_email_password_here


# ----------------------------------------
# Cloudinary Configuration
# ----------------------------------------

# Cloudinary account name for media storage
CLOUDINARY_CLOUD_NAME=your_cloudinary_name_here

# Cloudinary API key for authentication
CLOUDINARY_API_KEY=your_cloudinary_api_key_here

# Cloudinary API secret for authentication
CLOUDINARY_API_SECRET=your_cloudinary_api_secret_here


# ----------------------------------------
# Contact Information
# ----------------------------------------

# Support or contact email address for users
CONTACT_MAIL=your_contact_email_here
